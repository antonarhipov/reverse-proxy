version: '3.8'

services:
  # Reverse proxy service
  reverse-proxy:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - BACKEND1_URL=http://backend1:8080
      - BACKEND2_URL=http://backend2:8080
      - BACKEND3_URL=http://backend3:8080
    volumes:
      - ./logs:/app/logs
    depends_on:
      - backend1
      - backend2
      - backend3
      - logstash
    networks:
      - reverse-proxy-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend services
  backend1:
    image: jmalloc/echo-server
    ports:
      - "8081:8080"
    environment:
      - PORT=8080
    networks:
      - reverse-proxy-network

  backend2:
    image: jmalloc/echo-server
    ports:
      - "8082:8080"
    environment:
      - PORT=8080
    networks:
      - reverse-proxy-network

  backend3:
    image: jmalloc/echo-server
    ports:
      - "8083:8080"
    environment:
      - PORT=8080
    networks:
      - reverse-proxy-network

  # Elasticsearch for log storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - reverse-proxy-network

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    volumes:
      - ./config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
    depends_on:
      - elasticsearch
    networks:
      - reverse-proxy-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - reverse-proxy-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.40.0
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - reverse-proxy-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:9.3.0
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - reverse-proxy-network

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.5.0
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - reverse-proxy-network

networks:
  reverse-proxy-network:
    driver: bridge

volumes:
  elasticsearch-data:
  prometheus-data:
  grafana-data:
